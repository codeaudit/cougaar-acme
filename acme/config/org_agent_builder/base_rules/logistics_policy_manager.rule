####################################################
# Rule to insert LogisticsPolicyManagerPlugin with InventoryPolicies or Feeding Policy as needed
# plugin = org.cougaar.logistics.plugin.policy.LogisticsPolicyManagerPlugin
#          (POLICY=InventoryPolicy-CORPS-RPRPTCO.ldm.xml,DESTINATION=none)
# plugin = org.cougaar.logistics.plugin.policy.LogisticsPolicyManagerPlugin
#          (POLICY=ArmyFeedingPolicy.ldm.xml,DESTINATION=Subordinate,POLICY=LimitResourcesPolicy.ldm.xml,DESTINATION=Subordinate)
#
# Echelons of Support
# BRIGADE
# DIVISION
# CORPS
# THEATER
#
# Roles
# AmmunitionProvider
# FuelSupplyProvider
# PackagedPOLSupplyProvider
# SparePartsProvider
# SubsistenceSupplyProvider
#
# Policy Types
# Ammunition
# BulkPOL
# PackagedPOL
# Consumable
# Subsistence
#
logistics_policy_manager_plugin = "org.cougaar.logistics.plugin.policy.LogisticsPolicyManagerPlugin"
no_destination = "DESTINATION=none"
subordinate_destination = "DESTINATION=Subordinate"

# First iterate over agents, giving everyone the logistics_policy_manager_plugin
society.each_agent do |agent|
  agent.add_component do |c|
    c.classname = logistics_policy_manager_plugin
#
# Then get everyones roles, mechanisms, and echelons of support
    roles = Hash.new
    agent.each_facet(:role) do |facet|
      my_role = facet[:role].to_s
      my_mechanism = facet[:mechanism].to_s
      my_echelon_of_support= facet[:echelon_of_support].to_s
      roles[my_role] = [my_mechanism,my_echelon_of_support]
    end
# Debugging
#    puts "Agent_name is " + agent.name
#    roles.each {|role, m_e| puts "  Role= " + role + " Mechanism= " + m_e[0] + " Echelon_Of_Support= " + m_e[1] + "\n"}
#
# Then insert policy arguments
# AmmunitionProvider
    if agent.get_facet(:is_ua)
      unless agent.has_facet? { |facet| facet[:role]=='FuelSupplyProvider' && (facet[:mechanism] == 'TruckScheduler') }
	c.add_argument("POLICY=InventoryPolicy-UA-Consumer-BulkPOL.ldm.xml")
      else
	c.add_argument("POLICY=InventoryPolicy-UA-FSB-FWS-BulkPOL.ldm.xml")
      end
      c.add_argument(no_destination)
    else
      my_role = "AmmunitionProvider"
      my_commodity = "Ammunition"
      if (roles.has_key?(my_role) && roles[my_role][0] != "TerminalInventoryManager")
	my_echelon_of_support = roles[my_role][1]
	c.add_argument("POLICY=InventoryPolicy-#{my_echelon_of_support}-#{my_commodity}.ldm.xml")
	c.add_argument(no_destination)
      else
	my_echelon_of_support = "CONSUMER"
	c.add_argument("POLICY=InventoryPolicy-#{my_echelon_of_support}-#{my_commodity}.ldm.xml")
	c.add_argument(no_destination)
      end
      # FuelSupplyProvider
      my_role = "FuelSupplyProvider"
      my_commodity = "BulkPOL"
      if (roles.has_key?(my_role) && roles[my_role][0] != "TerminalInventoryManager")
	my_echelon_of_support = roles[my_role][1]
	c.add_argument("POLICY=InventoryPolicy-#{my_echelon_of_support}-#{my_commodity}.ldm.xml")
	c.add_argument(no_destination)
      else
	my_echelon_of_support = "CONSUMER"
	c.add_argument("POLICY=InventoryPolicy-#{my_echelon_of_support}-#{my_commodity}.ldm.xml")
	c.add_argument(no_destination)
      end
      # PackagedPOLSupplyProvider
      my_role = "PackagedPOLSupplyProvider"
      my_commodity = "PackagedPOL"
      if (roles.has_key?(my_role) && roles[my_role][0] != "TerminalInventoryManager")
	my_echelon_of_support = roles[my_role][1]
	c.add_argument("POLICY=InventoryPolicy-#{my_echelon_of_support}-#{my_commodity}.ldm.xml")
	c.add_argument(no_destination)
      else
	my_echelon_of_support = "CONSUMER"
	c.add_argument("POLICY=InventoryPolicy-#{my_echelon_of_support}-#{my_commodity}.ldm.xml")
	c.add_argument(no_destination)
      end
      # SparePartsProvider
      my_role = "SparePartsProvider"
      my_commodity = "Consumable"
      if (roles.has_key?(my_role) && roles[my_role][0] != "TerminalInventoryManager")
	my_echelon_of_support = roles[my_role][1]
	c.add_argument("POLICY=InventoryPolicy-#{my_echelon_of_support}-#{my_commodity}.ldm.xml")
	c.add_argument(no_destination)
      else
	my_echelon_of_support = "CONSUMER"
	c.add_argument("POLICY=InventoryPolicy-#{my_echelon_of_support}-#{my_commodity}.ldm.xml")
	c.add_argument(no_destination)
      end
      # SubsistenceSupplyProvider
      my_role = "SubsistenceSupplyProvider"
      my_commodity = "Subsistence"
      if (roles.has_key?(my_role) && roles[my_role][0] != "TerminalInventoryManager")
	my_echelon_of_support = roles[my_role][1]
	c.add_argument("POLICY=InventoryPolicy-#{my_echelon_of_support}-#{my_commodity}.ldm.xml")
	c.add_argument(no_destination)
      else
	my_echelon_of_support = "CONSUMER"
	c.add_argument("POLICY=InventoryPolicy-#{my_echelon_of_support}-#{my_commodity}.ldm.xml")
	c.add_argument(no_destination)
      end
      # ArmyFeedingPolicy
      my_role = "ArmyCommander"
      if (roles.has_key?(my_role))
	c.add_argument("POLICY=ArmyFeedingPolicy.ldm.xml")
	c.add_argument(subordinate_destination)
      end
    end
  end
end
