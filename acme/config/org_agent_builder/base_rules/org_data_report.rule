####################################################
# Rule to insert OrgReportPlugin and OrgReportPlugin
#   at every agent so it can join the society
#
# plugin = org.cougaar.mlm.plugin.organization.OrgDataPlugin
# plugin = org.cougaar.mlm.plugin.organization.OrgReportPlugin

org_data_plugin = "org.cougaar.mlm.plugin.organization.OrgDataPlugin"
org_data_param_plugin = "org.cougaar.mlm.plugin.organization.OrgDataParamPlugin"
org_report_plugin = "org.cougaar.mlm.plugin.organization.OrgReportPlugin"

society.each_agent do |agent|
  agent.add_component do |c|
    # Must check for UA Vehicle agents - they dont get the OrgDataPlugin,
    # but get the OrgDataParamPlugin
    if agent.get_facet(:is_ua) && agent.get_facet(:equip_type_id)
      c.classname = org_data_param_plugin
      # Now must supply as args every PG, etc....
      c.add_argument("Prototype:MilitaryOrganization")
      org_id = agent.get_facet(:org_id).to_s
      org_type_id = agent.get_facet(:org_type_id).to_s
      org_code = agent.get_facet(:org_code).to_s
      home_location = agent.get_facet(:home_location).to_s
      agency = agent.get_facet(:agency).to_s
      service = agent.get_facet(:service).to_s
      is_reserve = agent.get_facet(:is_reserve).to_s
      equip_type_id = agent.get_facet(:equip_type_id).to_s
      c.add_argument("ClusterPG:MessageAddress:MessageAddress:#{org_id}")
      c.add_argument("ItemIdentificationPG:ItemIdentification:String:UIC/#{org_id}")
      c.add_argument("ItemIdentificationPG:Nomenclature:String:#{org_id}")
      c.add_argument("ItemIdentificationPG:AlternateItemIdentification:String:OrgCode/#{org_code}")
      c.add_argument("TypeIdentificationPG:TypeIdentification:String:#{equip_type_id}")
      c.add_argument("TypeIdentificationPG:Nomenclature:String:#{org_type_id}")
      c.add_argument("MilitaryOrgPG:HomeLocation:queryGeolocLocation:GeolocCode=#{home_location}")
      c.add_argument("MilitaryOrgPG:UTC:String:#{org_type_id}")
      c.add_argument("MilitaryOrgPG:UIC:String:#{org_code}")
      if is_reserve.empty?
	c.add_argument("MilitaryOrgPG:IsReserve:boolean:false")
      else
	c.add_argument("MilitaryOrgPG:IsReserve:boolean:true")
      end
      c.add_argument("OrganizationPG:Service:Service:#{service}")
      c.add_argument("OrganizationPG:Agency:Agency:#{agency}")

      # Note that relationships are added below
    else
      c.classname = org_data_plugin
    end

    if agent.get_facet(:is_ua)
      # Supply superior relationship as argument
      if agent.get_facet(:superior_org_id)
	org_id = agent.get_facet(:superior_org_id).to_s
	sup = society.agents[org_id]
	unless sup == nil
	  org_type_id = society.agents[org_id].get_facet(:org_type_id).to_s
	  c.add_argument("Relationship:MessageAddress=#{org_id},ItemIdentification=#{org_id},TypeIdentification=UAType/#{org_type_id},Role=Subordinate,StartTime=01/01/2000 12:00 am,EndTime=")
	else
	  puts("WARNING: Agent #{agent.name} had superior_org #{org_id} that could not be found!")
	end
      end
      # Also supply SCAs as arguments
      agent.each_facet(:sca_supported_org) do |facet|
	org_id = facet[:sca_supported_org].to_s
	sup = society.agents[org_id]
	unless sup == nil 
	  org_type_id = society.agents[org_id].get_facet(:org_type_id).to_s
	  c.add_argument("Relationship:MessageAddress=#{org_id},ItemIdentification=#{org_id},TypeIdentification=UAType/#{org_type_id},Role=SupportSubordinate,StartTime=01/01/2000 12:00 am,EndTime=")
	else
	  puts("WARNING: Agent #{agent.name} had sca_supported_org #{org_id} that could not be found!")
	end
      end
    end
  end
  # Done with OrgDataPlugin

  agent.add_component do |c|
    c.classname = org_report_plugin
  end
end
