####################################################
# Rule to insert Inventory(Manager)Plugin
#   at consumer orgs and supply chain orgs
#   However, if the org has a role mechanism of TerminalInventoryManager for any supply provider role,
#   or has a role mechanism of TerminalAmmunitionPacker for the AmmunitionProvider role,
#   then we will instead insert a UniversalAllocator in another rule
#   Consumers:
#     - orgs which have equipment are considered potential consumers of Ammunition, BulkPOL, PackagedPOL,
#       and RepairParts (Consumable).
#     - orgs which have personnel are consumers of Subsistence
#
# plugin = org.cougaar.logistics.plugin.inventory.InventoryPlugin(SUPPLY_TYPE=Ammunition)
# 1AD: plugin = org.cougaar.logistics.plugin.inventory.InventoryPlugin(SUPPLY_TYPE=BulkPOL)
# UA: plugin = com.bbn.fcss.plugin.inventory.UAInventoryPlugin(SUPPLY_TYPE=BulkPOL, INVENTORY_FILE=CA_BN_bulkpol.inv)
# plugin = org.cougaar.logistics.plugin.inventory.InventoryPlugin(SUPPLY_TYPE=PackagedPOL)
# plugin = org.cougaar.logistics.plugin.inventory.InventoryPlugin(SUPPLY_TYPE=Consumable)
# plugin = org.cougaar.logistics.plugin.inventory.InventoryPlugin(SUPPLY_TYPE=Subsistence)

inventory_plugin = "org.cougaar.logistics.plugin.inventory.InventoryPlugin"
ua_inventory_plugin = "com.bbn.fcss.plugin.inventory.UAInventoryPlugin"

society.each_agent do |agent|
  roles = []
  role_mechanisms = []
  role_and_mechanisms = []
  agent.each_facet(:role) do |facet|
    roles << facet[:role]
    role_mechanisms << facet[:mechanism]
    role_and_mechanisms << facet[:role].to_s + "." + facet[:mechanism].to_s   
  end
  has_equipment = agent.get_facet(:has_equipment_assets)
  has_personnel = agent.get_facet(:has_personnel_assets)
  is_ua = agent.get_facet(:is_ua)

  unless is_ua
    if roles.include?("AmmunitionProvider") || has_equipment 
      unless (role_and_mechanisms.include?("AmmunitionProvider.TerminalAmmunitionPacker") ||     # OSC
	      role_and_mechanisms.include?("AmmunitionProvider.TerminalInventoryManager"))       # AWR-2
	agent.add_component do |c|
	  c.classname = inventory_plugin
	  c.add_argument('SUPPLY_TYPE=Ammunition')
	end
      end
    end
  end
  if roles.include?("FuelSupplyProvider") || has_equipment
    unless role_and_mechanisms.include?("FuelSupplyProvider.TerminalInventoryManager")
      agent.add_component do |c|
	if is_ua
	  c.classname = ua_inventory_plugin
	  c.add_argument('SUPPLY_TYPE=BulkPOL')
	  c.add_argument('INVENTORY_FILE=UA-Consumer-bulkpol.inv')
	else
	  c.classname = inventory_plugin
	  c.add_argument('SUPPLY_TYPE=BulkPOL')
	end
      end
    end
  end
  unless is_ua
    if roles.include?("PackagedPOLSupplyProvider") || has_equipment
      unless role_and_mechanisms.include?("PackagedPOLSupplyProvider.TerminalInventoryManager")
	agent.add_component do |c|
	  c.classname = inventory_plugin
	  c.add_argument('SUPPLY_TYPE=PackagedPOL')
	end
      end
    end
  end
  unless is_ua
    if roles.include?("SparePartsProvider") || has_equipment
      unless role_and_mechanisms.include?("SparePartsProvider.TerminalInventoryManager")
	agent.add_component do |c|
	  c.classname = inventory_plugin
	  c.add_argument('SUPPLY_TYPE=Consumable')
	end
      end
    end
  end
  unless is_ua
    if roles.include?("SubsistenceSupplyProvider") || has_personnel
      unless role_and_mechanisms.include?("SubsistenceSupplyProvider.TerminalInventoryManager")
	agent.add_component do |c|
	  c.classname = inventory_plugin
	  c.add_argument('SUPPLY_TYPE=Subsistence')
	end
      end
    end
  end
end
