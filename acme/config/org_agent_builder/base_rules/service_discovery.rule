####################################################
# Rule to insert SDRegistrationPlugin and SDClientPlugin
#   at every agent so providers can register and customers can find providers
#
# 1. plugin = org.cougaar.servicediscovery.service.UDDI4JRegistrationServiceComponent
# 2. plugin = org.cougaar.servicediscovery.service.UDDI4JRegistryQueryServiceComponent
# 3. plugin = org.cougaar.servicediscovery.plugin.LineagePlugin
# 4. plugin = org.cougaar.servicediscovery.plugin.SDRegistrationPlugin
# 5. plugin = org.cougaar.servicediscovery.servlet.MatchMakerQueryServletComponent(org.cougaar.servicediscovery.servlet.MatchMakerQueryServlet,/matchmaker_query)
# 6. plugin = org.cougaar.servicediscovery.plugin.SDClientPlugin(NeededRole,NeededRole,...)
# 7. plugin = org.cougaar.servicediscovery.plugin.MatchmakerStubPlugin
# 8. plugin = org.cougaar.servicediscovery.plugin.SDProviderPlugin(ProvidedRole,ProvidedRole,...)
#
# Roles
# AmmunitionProvider
# FuelSupplyProvider
# PackagedPOLSupplyProvider
# SparePartsProvider
# SubsistenceSupplyProvider
#
uddi4j_registration_service = "org.cougaar.servicediscovery.service.UDDI4JRegistrationServiceComponent"
uddi4j_registry_query_service = "org.cougaar.servicediscovery.service.UDDI4JRegistryQueryServiceComponent"
lineage_plugin = "org.cougaar.servicediscovery.plugin.LineagePlugin"
sd_registration_plugin = "org.cougaar.servicediscovery.plugin.SDRegistrationPlugin"
matchmaker_query_servlet_component = "org.cougaar.servicediscovery.servlet.MatchMakerQueryServletComponent"
matchmaker_query_servlet = "org.cougaar.servicediscovery.servlet.MatchMakerQueryServlet"
sd_client_plugin = "org.cougaar.servicediscovery.plugin.SDClientPlugin"
matchmaker_stub_plugin = "org.cougaar.servicediscovery.plugin.MatchmakerStubPlugin"
sd_provider_plugin = "org.cougaar.servicediscovery.plugin.SDProviderPlugin"

supply_roles = Array ["AmmunitionProvider",
                      "FuelSupplyProvider",
                      "PackagedPOLSupplyProvider",
                      "SparePartsProvider",
                      "SubsistenceSupplyProvider"]
strat_trans_role = "StrategicTransportationProvider"                      

# First iterate over agents, collecting the provided_roles, mechanisms, and echelons of support
society.each_agent do |agent|
  provided_roles = Hash.new
  agent.each_facet(:role) do |facet|
    my_role = facet[:role].to_s
    my_mechanism = facet[:mechanism].to_s
    my_echelon_of_support= facet[:echelon_of_support].to_s
    provided_roles[my_role] = [my_mechanism,my_echelon_of_support]
  end
#
# Then get the required_roles
  required_roles = Array.new
#
# Add each provided_role if it is a supply_role, unless the mechanism is "TerminalInventoryManager"
# or if it is the strat_trans_role with a mechanism of "PassThrough"
  provided_roles.each do |my_role, m_e| 
    if supply_roles.include?(my_role) && (m_e[0] != "TerminalInventoryManager" && m_e[0] != "TerminalAmmunitionPacker")
      required_roles << my_role
    end
    if my_role == strat_trans_role && m_e[0] == "PassThrough"
      required_roles << my_role
    end
  end
# Add the required supply roles if the org has equipment_assets
  if agent.get_facet(:has_equipment_assets)
    unless agent.get_facet(:is_ua)
      required_roles << "AmmunitionProvider"
      required_roles << "FuelSupplyProvider"
      required_roles << "PackagedPOLSupplyProvider"
      required_roles << "SparePartsProvider"
    end
  end
#
# Add the required supply role if the org has personnel_assets
  if agent.get_facet(:has_personnel_assets)
    unless agent.get_facet(:is_ua)
      required_roles << "SubsistenceSupplyProvider"
    end
  end
#
# Add the required supply role if the org is a UA agent
  if agent.get_facet(:is_ua)
    required_roles << "FuelSupplyProvider"
  end
#
# Add the required strat_trans_role if the agent is deployable with either equipment or personnel
  if agent.get_facet(:has_personnel_assets) || agent.get_facet(:has_equipment_assets)
    if agent.get_facet(:is_deployable)
      required_roles << strat_trans_role
    end
  end
#
# Add the strat_trans_role to the OSC Agent.
# (Role == "AmmunitionProvider" && Mechanism=="TerminalAmmunitionPacker")
  provided_roles.each do |my_role, m_e| 
    if my_role == "AmmunitionProvider" && m_e[0] == "TerminalAmmunitionPacker"
      required_roles << strat_trans_role
    end
  end
#
# Add the required roles for the Transcom Community
  if agent.get_facet(:echelon_group) == "Transcom"
    provided_roles.each do |my_role, m_e|
#
# TRANSCOM needs AirTransportationProvider
# TRANSCOM needs SeaTransportationProvider
      if my_role == strat_trans_role && m_e[0] == "ModeSelector"   # That makes this org TRANSCOM
        required_roles << "AirTransportationProvider"
        required_roles << "SeaTransportationProvider"
      end
#
# GlobalAir needs CONUSGroundTransportationProvider
# GlobalAir needs OrganicAirTransportationprovider
# GlobalAir needs TheaterStrategicTransportationProvider
      if my_role == "AirTransportationProvider"                   # That makes this org GlobalAir
        required_roles << "CONUSGroundTransportationProvider"
        required_roles << "OrganicAirTransportationProvider"
        required_roles << "TheaterStrategicTransportationProvider"
      end
#
# GlobalSea needs CONUSGroundTransportationProvider
# GlobalSea needs ShipPackingTransportationProvider
# GlobalSea needs TheaterStrategicTransportationProvider
      if my_role == "SeaTransportationProvider"                   # That makes this org GlobalSea
        required_roles << "CONUSGroundTransportationProvider"
        required_roles << "ShipPackingTransportationProvider"
        required_roles << "TheaterStrategicTransportationProvider"
      end
#
    end
  end
#
# sort and get rid of duplicated required_roles, if any
  required_roles = required_roles.sort
  required_roles = required_roles.uniq 
#
# Then insert the UDDI4JRegistrationService, UDDI4JRegistryQueryService with no arguments
# Load these UDDI4J plugins early and with Binder priority so SDReg Plugin can always find them
  agent.add_component do |c|
    c.classname = uddi4j_registration_service
  end
  agent.add_component do |c|
    c.classname = uddi4j_registry_query_service
  end
#
# Then insert the LineagePlugin and SDRegistrationPlugin with no arguments
  agent.add_component do |c|
    c.classname = lineage_plugin
  end
  agent.add_component do |c|
    c.classname = sd_registration_plugin
  end
#
# Then insert the MatchMakerQueryServletComponent with its arguments
  agent.add_component do |c|
    c.classname = matchmaker_query_servlet_component
    c.add_argument(matchmaker_query_servlet)
    c.add_argument("/matchmaker_query")
  end
#
#
# Then insert the SDClientPlugin with required role arguments
  agent.add_component do |c|
    c.classname = sd_client_plugin
    required_roles.each { |my_role| c.add_argument(my_role) }
    c.priority = "LOW"
  end
#
# Then insert the MatchmakerStubPlugin with no arguments
  agent.add_component do |c|
    c.classname = matchmaker_stub_plugin
  end
#
# Then insert the SDProviderPlugin with Provided roles (although these are presently ignored)
  agent.add_component do |c|
    c.classname = sd_provider_plugin
# Comment out args for now
#   provided_roles.each_key { |my_role| c.add_argument(my_role) }
  end

end
