####################################################
# Rule to insert OrgReportPlugin and OrgReportPlugin
#   at every agent so it can join the society
#
# plugin = org.cougaar.mlm.plugin.organization.OrgDataParamPlugin
# plugin = org.cougaar.mlm.plugin.organization.OrgReportPlugin

org_data_param_plugin = "org.cougaar.mlm.plugin.organization.OrgDataParamPlugin"
org_report_plugin = "org.cougaar.mlm.plugin.organization.OrgReportPlugin"
org_needs = Array.new

society.each_agent do |agent|

  if (agent.get_facet(:is_deployable) && agent.get_facet(:has_physical_assets)) || agent.has_facet? { |facet| facet[:role]=='StrategicTransportationProvider' && (facet[:mechanism] == 'PassThrough') }
    agent_org_id = agent.get_facet(:org_id)
    reqRole = 'StrategicTransportationProvider'
    if agent.get_facet(:echelon) == 'DIVISION' 
      reqEOS = 'JOINT'
    else
      reqEOS = 'DIVISION'
    end
    org_needs.push([agent_org_id,reqRole,reqEOS])
  end
end

society.each_agent do |agent|
  agent.add_component do |c|
    c.classname = org_data_param_plugin
    # Now must supply as args every PG, etc....
    c.add_argument("Prototype:Organization")
    uic = agent.get_facet(:uic).to_s
    org_id = agent.get_facet(:org_id).to_s
    home_location = agent.get_facet(:home_location).to_s
    is_reserve = agent.get_facet(:is_reserve).to_s
    c.add_argument("ClusterPG:MessageAddress:MessageAddress:#{org_id}")
    c.add_argument("ItemIdentificationPG:ItemIdentification:String:#{org_id}")
    c.add_argument("ItemIdentificationPG:Nomenclature:String:#{org_id}")
    c.add_argument("TypeIdentificationPG:TypeIdentification:String:UTC/RTOrg")
    c.add_argument("TypeIdentificationPG:Nomenclature:String:#{org_id}")
    c.add_argument("MilitaryOrgPG:UTC:String:#{org_id}")
    c.add_argument("MilitaryOrgPG:UIC:String:#{uic}")
    if is_reserve.empty?
      c.add_argument("MilitaryOrgPG:IsReserve:boolean:false")
    else
      c.add_argument("MilitaryOrgPG:IsReserve:boolean:true")
    end

    # Supply superior relationship as argument
    if agent.get_facet(:superior_org_id)
      org_id = agent.get_facet(:superior_org_id).to_s
      org_type_id = "UTC/RTOrg"
      sup = society.agents[org_id]
      unless sup == nil
        c.add_argument("Relationship:MessageAddress=#{org_id},ItemIdentification=#{org_id},TypeIdentification=#{org_type_id},Role=Subordinate,StartTime=01/01/2000 12:00 am,EndTime=")
      else
        puts("WARNING: Agent #{agent.name} had superior_org #{org_id} that could not be found!")
      end
    end

    # Supply provider relationships as argument
    org_type_id = 'UTC/RTOrg'
    if agent.has_facet? { |facet| facet[:role]=='StrategicTransportationProvider' && (facet[:echelon_of_support] == 'JOINT') }
      # Look for customers who want JOINT
      org_needs.each do |cust_org_id, cust_reqRole, cust_reqEOS|
        if cust_reqRole == 'StrategicTransportationProvider' && cust_reqEOS == 'JOINT'
          c.add_argument("Relationship:MessageAddress=#{cust_org_id},ItemIdentification=#{cust_org_id},TypeIdentification=#{org_type_id},Role=#{cust_reqRole},StartTime=01/01/2000 12:00 am,EndTime=")
        end
      end
    elsif agent.has_facet? { |facet| facet[:role]=='StrategicTransportationProvider' && (facet[:echelon_of_support] == 'DIVISION') }
      # Look for customers who want DIVISION
      org_needs.each do |cust_org_id, cust_reqRole, cust_reqEOS|
        if cust_reqRole == 'StrategicTransportationProvider' && cust_reqEOS == 'DIVISION'
          c.add_argument("Relationship:MessageAddress=#{cust_org_id},ItemIdentification=#{cust_org_id},TypeIdentification=#{org_type_id},Role=#{cust_reqRole},StartTime=01/01/2000 12:00 am,EndTime=")
        end
      end
    end
      

    # Note that relationships are added below
  end
  # Done with OrgDataParamPlugin
  agent.add_component do |c|
    c.classname = org_report_plugin
  end
end
