= ACME Capabilities in 2004 =

This document is presented to catch folks up on new capabilities that 
have been added to the ACME scripting framework to allow for the 
scaling of ACME into the Engineering Test and Assessment cycles.    

First, as a quick review, a typical script looks something like this:

== Society Scripting Review ==

  CIP = ENV['CIP']
  RULES = File.join(CIP, 'csmart','config','rules')
  
  $:.unshift File.join(CIP, 'csmart', 'acme_scripting', 'src', 'lib')
  $:.unshift File.join(CIP, 'csmart', 'acme_service', 'src', 'redist')
  
  require 'cougaar/scripting'
  require 'ultralog/scripting'
  
  HOSTS_FILE = Ultralog::OperatorUtils::HostManager.new.get_hosts_file
  
  Cougaar::ExperimentMonitor.enable_stdout
  Cougaar::ExperimentMonitor.enable_logging
  
  Cougaar.new_experiment("Soc-RichKilmer").run(1) {
    
    do_action "LoadSocietyFromScript", "#{CIP}/csmart/config/societies/ad/SMALL-1AD-TRANS-1359.rb"
    do_action "LayoutSociety", "#{CIP}/operator/1AD-SMALL-layout.xml", HOSTS_FILE
    
    do_action "TransformSociety", false,
      "#{RULES}/isat",
      "#{RULES}/logistics"
    do_action "SaveCurrentSociety", "mySociety.xml"
    do_action "StartJabberCommunications"
    do_action "CleanupSociety"
    do_action "VerifyHosts"
    
    do_action "ConnectOperatorService"
    do_action "ClearPersistenceAndLogs"
    do_action "InstallCompletionMonitor"
    
    do_action "StartSociety"
    
    wait_for  "GLSConnection", true
    wait_for  "NextOPlanStage"
    do_action "Sleep", 30.seconds
    do_action "PublishNextStage"
    
    wait_for  "SocietyQuiesced"  do
      do_action "StopSociety"
      do_action "StopCommunications"
    end
    
    do_action "StopSociety"
    do_action "StopCommunications"
  }

The main behavior of all scripts is contained in the Actions 
and States.  The two directives in ACME which let you call these are:

  do_action "ActionName" [, param1, param2, paramN  { optional block } ]

and

  wait_for "StateName" [, timeout, param1, param2, paramN] do |arg1, argN| 
    ''block of actions and states to use if state times out''
  end

== Include Directive ==

In 2003 the '''include''' directive was added that "includes" the content of 
another script at a certain location:

  include "scriptname.rb" [, param1, param2, paramN]

This was useful if you had a repeated set of State/Actions 
that you wanted to use in different scripts.  As shown above, 
you can pass parameters into this included script.  In that 
script, you access the parameters using the local variable 
'''parameters'''.

=== Include Usage ===

There has been a need to reuse parts of scripts from one script 
to another.  To enable this, I added a new directive named 
'''include''' that allows for inlining pieces of scripts into 
another script.  For example here is the beginning of a script:

  Cougaar.new_experiment("Soc-Base-Plan").run {
    do_action "LoadSocietyFromScript", "#{CIP}/configs/ul/FULL-1AD-TRANS-1359.rb"
    do_action "LayoutSociety", "#{CIP}/operator/1ad-layout-10_4_1.xml", HOSTS_FILE
    
    do_action "TransformSociety", false,
      "#{RULES}/isat",
      "#{RULES}/logistics"
    do_action "SaveCurrentSociety", "mySociety.xml"
    do_action "StartJabberCommunications"
    do_action "VerifyHosts"
    
    do_action "CleanupSociety"
    
    do_action "ConnectOperatorService"
    do_action "ClearPersistenceAndLogs"
    
    do_action "StartSociety"
    
    wait_for  "GLSConnection", true
    wait_for  "NextOPlanStage"
    do_action "Sleep", 30.seconds
    do_action "PublishNextStage"
    ...

and you wanted to reuse the section at the end (start society...) 
you could move that to a new file:

=== start_society.rb ===

  do_action "StartSociety"
  
  wait_for  "GLSConnection", true
  wait_for  "NextOPlanStage"
  do_action "Sleep", 30.seconds
  do_action "PublishNextStage"

And change your prior script to...

  Cougaar.new_experiment("Soc-Base-Plan").run {
    do_action "LoadSocietyFromScript", "#{CIP}/configs/ul/FULL-1AD-TRANS-1359.rb"
    do_action "LayoutSociety", "#{CIP}/operator/1ad-layout-10_4_1.xml", HOSTS_FILE
    
    do_action "TransformSociety", false,
      "#{RULES}/isat",
      "#{RULES}/logistics"
    do_action "SaveCurrentSociety", "mySociety.xml"
    do_action "StartJabberCommunications"
    do_action "VerifyHosts"
    
    do_action "CleanupSociety"
    
    do_action "ConnectOperatorService"
    do_action "ClearPersistenceAndLogs"
    
    include "start_society.rb"
    ...

Within the included file, there is an ability to get access to 
the parameters that you specify after the file name in the 
include directive.  Optional parameters are accessed in an array 
'parameters' that is zero-length if you don't specify any 
parameters or you can access them like this:

in the script:

  include "test.rb", "foo"

in the included file:

  parameters[0] #=> "foo"

If you wanted to then parameterize the included file (say the 
amount of time to sleep between NextOPlan...PublishNext...) 
then you could refactor it like this:

=== start_society.rb ===

  if parameters.size==0
    sleepTime = 30.seconds
  else
    sleepTime = parameters[0]
  end
  
  do_action "StartSociety"
  
  wait_for  "GLSConnection", true
  wait_for  "NextOPlanStage"
  do_action "Sleep", sleepTime
  do_action "PublishNextStage"

Then, in your script you change the include line to be:

  include "start_society.rb", 50.seconds

That's all there is to it.

Note that variables/constants that are local to the scope of the 
script (like CIP, HOSTS_FILE, RULES above) will not be accessible 
in the included files...instead you would pass those values as 
parameters to the included files like:

  include "configure_society.rb", CIP, HOSTS_FILE, RULES

== Insert Before/After/At Directives ==

The new directives are:

  insert_before(<location> [, ordinality]) do
    ...actions and states...
  end

  insert_after(<location> [, ordinality]) do
    ...actions and states...
  end

  at :''location''

These three work together and with the do_action and wait_for.  
The ''location'' can be any Action name, State name, or "at" symbol.  
insert_before/after insert the block of Actions/States in the 
script at the identified location.  For example, if in the above 
script you had:

  ...
    wait_for  "SocietyQuiesced"  do
      do_action "StopSociety"
      do_action "StopCommunications"
    end
    
    at :society_completed
    
    do_action "StopSociety"
    do_action "StopCommunications"
  }

You could then do:

  insert_before(:society_completed) do
    wait_for "Command", "shutdown"
  end

And when that is executed the wait_for "Command"... would be 
inserted above the :society_completed location of the script.

You could just as easily done:

  insert_before("StopSociety") do
    wait_for "Command", "shutdown"
  end

To insert it above the StopSociety Action.  In both examples 
it gets included in the same spot, the difference being that 
the at :location symbol lets you move it around if you needed 
to change the script (like archive logs or something).

The question becomes where do these insert_before/after 
segments go?  They go in included scripts (rather than the 
main script).

Let's create a simple example.  If you rewrote the original 
script to contain 'at' locations:

=== baseline.rb (location script) ===

  CIP = ENV['CIP']
  RULES = File.join(CIP, 'csmart','config','rules')
  
  $:.unshift File.join(CIP, 'csmart', 'acme_scripting', 'src', 'lib')
  $:.unshift File.join(CIP, 'csmart', 'acme_service', 'src', 'redist')
  
  require 'cougaar/scripting'
  require 'ultralog/scripting'
  
  HOSTS_FILE = Ultralog::OperatorUtils::HostManager.new.get_hosts_file
  
  Cougaar::ExperimentMonitor.enable_stdout
  Cougaar::ExperimentMonitor.enable_logging
  
  Cougaar.new_experiment("SocBaseline").run(1) {
  
    do_action "LoadSocietyFromScript", "#{CIP}/csmart/config/societies/ad/SMALL-1AD-TRANS-1359.rb"
    do_action "LayoutSociety", "#{CIP}/operator/1AD-SMALL-layout.xml", HOSTS_FILE
  
    do_action "TransformSociety", false,
      "#{RULES}/isat",
      "#{RULES}/logistics"
    do_action "SaveCurrentSociety", "mySociety.xml"
    do_action "StartJabberCommunications"
    do_action "CleanupSociety"
    do_action "VerifyHosts"
    
    at :society_configured
    
    do_action "ConnectOperatorService"
    do_action "ClearPersistenceAndLogs"
    do_action "InstallCompletionMonitor"
    
    do_action "StartSociety"
    
    wait_for  "GLSConnection", true
    wait_for  "NextOPlanStage"
    do_action "Sleep", 30.seconds
    
    at :begin_planning
    
    do_action "PublishNextStage"
    wait_for  "SocietyQuiesced"  do
      do_action "StopSociety"
      do_action "StopCommunications"
    end
    
    at :planning_complete
    
    do_action "StopSociety"
    do_action "StopCommunications"
  }


We can then create two 'include' scripts:

=== stress_cpu.rb script ===

  =begin script
  
  include_path: stress_cpu.rb
  description: Stresses the CPUs of a provided list of hosts during planning
  parameters:
    - percent_stress: The percentage of stress (0-99)
    - hosts: The host names (as a comma delimited string i.e. 'hosta,hostb')
  
  =end
  
  insert_before(:begin_planning) do
    do_action 'StressCPU', parameters[0], parameters[1]
  end
  
  insert_before(:planning_complete) do
    # NOTE: Remove stresses by setting at zero percent
    do_action 'StressCPU', 0, parameters[1]
  end

In the above example, we have some "executable" documentation 
(between the '=begin script' and '=end') and then two insert_before 
examples.  We are going to ignore the documentation for now.  This 
script accepts two parameters.

The second script will just pause the experiment before shutting down:

=== pause.rb script ===

  =begin script
  
  description: Pauses a script to await a Jabber IM.
  parameters:
    - resume_command: The command to wait for (received via Jabber)
  
  =end
  
  insert_before("StopSociety") do
    wait_for "Command", parameters[0]
  end

This script contains a single parameter (the resume_command). Now, 
we need a way to include these two 'include scripts' into our main script.

One way to do this would be to modify the main script with two includes:

  ...
    at :planning_complete
    
    do_action "StopSociety"
    do_action "StopCommunications"
    
    include "stress_cpu.rb", 40, "u113"
    include "pause.rb", "shutdown"
  }

== Experiment Definitions ==

While this works, the problem with it is you are modifying (main) 
scripts that are likely checked into CVS...and those changes will 
be lost once you reload cougaar/overlays.  Also, you may want the 
same script with just differing includes/parameters.  To address this 
requirement, a new capability (and file format) was created.  This 
capability allows you to create an Experiment Description file:

=== Experiment isat_expt_uc1.rb ===

  =begin experiment
  
  name: ISAT-StressCPU
  description: Normal run with CPU degraded to 40 percent during planning
  script: baseline.rb
  include_scripts:
    - script: stress_cpu.rb
      parameters:
        - percent_stress: 40
        - hosts: "hosta,hostb"
    -script: pause.rb
      parameters:
        - resume_command: shutdown
  
  use_cases:
    - isat_uc1
  
  =end
  
  require 'cougaar/scripting'
  Cougaar::ExperimentDefinition.register(__FILE__)

The first section is a ruby comment block ("=being experiment"..."=end") 
which contains the YAML formatted description of the experiment.  The last 
two lines contain the "magic" code which causes the ACME framework to 
parse the YAML description out of the file, and register the experiment 
definition.  In addition, if you run this file...

  > ruby isat_expt_uc1.rb

...ACME will also execute the experiment defined within it.  This 
enables the file to be used to both define and execute experiments.  
What ACME does internally is similar to the modification of the main 
script (above).  After the main script is processed, but before execution, 
the include scripts are 'include'd into that main script, and the 
parameters defined in the description file are passed in.  This keeps 
the main scripts free of change, and the parameters passed into include 
scripts to be located in a single place.  It is possible to have multiple 
"=begin experiment / =end" definitions in a single file but the direct 
execution of that file will run the last definition.  If this file is 
required, rather than directly executed, it will just define the 
experiments, but not execute them.


One major benefit with the use of experiment definitions is that the
parameters can be referenced by symbolic name (rather than numberic
index):

  =begin script
  
  include_path: command_include.rb
  description: Inserts a wait_for "Command" state after a given location
  parameters:
    - location: The location to insert the command after
    - command_text: The command text to wait for
  
  =end
  
  insert_before(parameters[:location].intern) do
    wait_for "Command", parameters[:command_text]
  end


=== Cougaar overlay specifications isat_expt_uc1.rb ===

  =begin experiment
  
  name: ISAT-StressCPU
  description: Normal run with CPU degraded to 40 percent during planning
  script: baseline.rb
  include_scripts:
    - script: stress_cpu.rb
      parameters:
        - percent_stress: 40
        - hosts: "hosta,hostb"
    -script: pause.rb
      parameters:
        - resume_command: shutdown
  
  use_cases:
    - isat_uc1
  
  cougaar_configuration:
    - cougaar_build: B10_4_4
    - overlays:
      - BBN_ulconfigs_HEAD_HEAD.zip
  
  =end
  
  require 'cougaar/scripting'
  Cougaar::ExperimentDefinition.register(__FILE__)



=== Reporting ACME Plugins ===

  class ReportingCore
    extend FreeBASE::StandardPlugin
    
    def self.start(plugin)
      self.new(plugin)
      plugin.transition(FreeBASE::RUNNING)
    end
    
    attr_reader :plugin
    def initialize(plugin)
      @plugin = plugin
      @reporting = @plugin['/acme/reporting']
      @reporting.manager.add_listener(&method(:process_archive))
    end
    
    def process_archive(archive_structure)
      archive_structure.files_with_description(/Log4j/).each do |file_ref|
        # process log4j files
      end
      myfile = 'myreport.txt'
      File.open(myfile, 'w') do |file|
        #write out report
      end
      archive_structure.add_report do |report|
        report.file = myfile
        report.description = "This is my report file"
        report.success
      end
    end
  end
