##
#  <copyright>
#  Copyright 2002 InfoEther, LLC
#  under sponsorship of the Defense Advanced Research Projects Agency (DARPA).
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the Cougaar Open Source License as published by
#  DARPA on the Cougaar Open Source Website (www.cougaar.org).
#
#  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
#  PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
#  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
#  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
#  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
#  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
#  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
#  PERFORMANCE OF THE COUGAAR SOFTWARE.
# </copyright>
#

require 'rexml/document'

module Cougaar
  module Actions
    class GetAgentCompletion < Cougaar::Action
      PRIOR_STATES = ["SocietyRunning"]
      DOCUMENTATION = Cougaar.document {
        @description = "Gets an individual agent's completion statistics."
        @parameters = [
          {:agent => "required, The name of the agent."}
        ]
        @block_yields = [
          {:stats => "The completion statistics object (UltraLog::Completion)."}
        ]
        @example = "
          do_action 'GetAgentCompletion', 'NCA' do |stats|
            puts stats
          end
        "
      }
      def initialize(run, agent_name, &block)
        super(run)
        @agent_name = agent_name
        @action = block
      end
      def perform
        @action.call(::UltraLog::Completion.status(@run.society.agents[@agent_name]))
      end
    end
  
    class SaveSocietyCompletion < Cougaar::Action
      PRIOR_STATES = ["SocietyRunning"]
      DOCUMENTATION = Cougaar.document {
        @description = "Gets all agent's completion statistics and writes them to a file."
        @parameters = [
          {:file => "required, The file name to write to."}
        ]
        @example = "do_action 'SaveSocietyCompletion', 'completion.xml'"
      }
      def initialize(run, file)
        super(run)
        @file = file
      end
      def perform
        agent_list = []
        @run.society.each_agent {|agent| agent_list << agent.name}
        agent_list.sort!
        xml = "<CompletionSnapshot>\n"
        agent_list.each do |agent|
          xml += ::UltraLog::Completion.status(@run.society.agents[agent]).to_s
        end
        xml += "</CompletionSnapshot>"
        save(xml)
      end
      def save(result)
        File.open(@file, "wb") do |file|
          file.puts result
        end
      end
    end
  end
end

module UltraLog
  ##
  # The Completion class wraps access the data generated by the completion servlet
  #
  class Completion
  
    ##
    # Helper method that extracts the host and agent name to get completion for
    #
    # agent:: [Cougaar::Agent] The agent to get completion for
    # return:: [UltraLog::Completion::Statistics] The results of the query
    #
    def self.status(agent)
      data = Cougaar::Communications::HTTP.get("#{agent.uri}/completion?format=xml", 60)[0]
      return Statistics.new(agent.name, data)
    end
    
    ##
    # Gets completion statistics for a host/agent
    #
    # host:: [String] Host name
    # agent:: [String] Agent name
    # return:: [UltraLog::Completion::Statistics] The results of the query
    #
    def self.query(host, agent, port)
      data = Cougaar::Communications::HTTP.get("http://#{host}:#{port}/$#{agent}/completion?format=xml", 60)[0]
      return Statistics.new(agent, data)
    end
    
    ##
    # The statistics class holds the results of a completion query
    #
    class Statistics
      attr_reader :agent, :time, :total, :unplanned, :unestimated, :unconfident, :failed
      
      ##
      # Parses the supplied XML data into the statistics attributed
      #
      # data:: [String] A completion XML query
      #
      def initialize(agent, data)
        xml = REXML::Document.new(data)
        root = xml.root
        @agent = agent
        @time = root.elements["TimeMillis"].text.to_i
        @total = root.elements["NumTasks"].text.to_i
        @unplanned = root.elements["NumUnplannedTasks"].text.to_i
        @unestimated = root.elements["NumUnestimatedTasks"].text.to_i
        @unconfident = root.elements["NumUnconfidentTasks"].text.to_i
        @failed = root.elements["NumFailedTasks"].text.to_i
      end
      
      ##
      # Checks if agent is complete
      #
      # return:: [Boolean] true if unplanned and unestimated are zero, false otherwise
      #
      def complete?
        return (@unplanned==0 and @unestimated==0)
      end
      
      ##
      # Checks if agent has failed tasks
      #
      # return:: [Boolean] true if failed > 0, false otherwise
      #
      def failed?
        return (@failed > 0)
      end
      
      def to_s
        s =  "<SimpleCompletion agent='#{@agent}'>\n"
        s << "  <TimeMillis>#{@time}</TimeMillis>\n"
        s << "  <NumTasks>#{@total}</NumTasks>\n"
	pct = (@total - @unplanned - @unestimated - @unconfident - @failed) * 100 / @total
	s << "  <PercentComplete>#{pct}</PercentComplete>\n"
        s << "  <NumUnplannedTasks>#{@unplanned}</NumUnplannedTasks>\n"
        s << "  <NumUnestimatedTasks>#{@unestimated}</NumUnestimatedTasks>\n"
        s << "  <NumUnconfidentTasks>#{@unconfident}</NumUnconfidentTasks>\n"
        s << "  <NumFailedTasks>#{@failed}</NumFailedTasks>\n"
        s << "</SimpleCompletion>\n"
      end
      
    end
  end 
end

