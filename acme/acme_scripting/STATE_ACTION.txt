Documented Actions: ---------------------------
Name: AggAgentQueryBasic
Description: Perform basic AggAgent query on inventory and write results to a file.
Resultant State: None
Prior States: None
Parameters:
  file: required, The file name to write to.
Example:

do_action 'AggAgentQueryBasic', 'agg_agent_basic.xml'
   -------
Name: AggAgentQueryDemand
Description: Perform AggAgent query on demand and write results to a file.
Resultant State: None
Prior States: None
Parameters:
  file: required, The file name to write to.
Example:

do_action 'AggAgentQueryDemand', 'agg_agent_demand.xml'
   -------
Name: AggAgentQueryJP8
Description: Perform AggAgent query on JP8 and write results to a file.
Resultant State: None
Prior States: None
Parameters:
  file: required, The file name to write to.
Example:

do_action 'AggAgentQueryJP8', 'agg_agent_jp8.xml'
   -------
Name: AggAgentQueryShortfall
Description: Perform AggAgent query on shortfall and write results to a file.
Resultant State: None
Prior States: None
Parameters:
  file: required, The file name to write to.
Example:

do_action 'AggAgentQueryShortfall', 'agg_agent_shortfall.xml'
   -------
Name: ArchiveDatabases
Description: Archives database data.
Resultant State: None
Prior States: OperatorServiceConnected
Example:

do_action 'ArchiveDatabases'
   -------
Name: ArchiveLogs
Description: Archives the log data.
Resultant State: None
Prior States: OperatorServiceConnected
Example:

do_action 'ArchiveLogs'
   -------
Name: CheckRelations
Description: Checks to ensure that the relationships between agents are symmetric.
Resultant State: None
Prior States: None
Parameters:
  show_missing_agents: default=false, Set 'true' to show missing agents.
Example:

do_action 'CheckRelations', true
   -------
Name: ClearLogs
Description: Clears society log data.
Resultant State: None
Prior States: OperatorServiceConnected
Example:

do_action 'ClearLogs'
   -------
Name: ClearPersistence
Description: Clears society persistence data.
Resultant State: None
Prior States: OperatorServiceConnected
Example:

do_action 'ClearPersistence'
   -------
Name: ClearPersistenceAndLogs
Description: Clears society persistence and log data.
Resultant State: None
Prior States: OperatorServiceConnected
Example:

do_action 'ClearPersistenceAndLogs'
   -------
Name: CollectMtsMetrics
Description: Collects message transport service metrics and stores them in a file.
Resultant State: None
Prior States: None
Parameters:
  filename: default='mts.csv', File name used to hold metrics data.
  type: default='remote', The type of metrics ('remote' or 'local')
  debug: default=false, Set 'true' to debug action
Example:

do_action 'CollectMtsMetrics', 'mymts.csv'
   -------
Name: CompletionControl
Description: Adjusts the completion control (advancing clock, etc) for the running society.
Resultant State: SocietyPlanning
Prior States: SocietyRunning
Block syntax: { | cc | ... }
  cc: The completion control object (UltraLog::CompletionControl).
Example:

do_action 'CompletionControl' do |cc|
  cc.numberOfSteps = 2
  cc.update
end
   -------
Name: ConnectOperatorService
Description: Verifies that the supplied host is running the ACME Service and has the Operator plugins enabled.
Resultant State: OperatorServiceConnected
Prior States: None
Parameters:
  host: required, The host running the ACME Service and Operator plugin.
Example:

do_action 'ConnectOperatorService', 'sb022'
   -------
Name: ConnectToDatagrabber
Description: Establishes a connection to a datagrabber service.
Resultant State: None
Prior States: None
Parameters:
  host: required, The host running datagrabber.
Block syntax: { | datagrabber | ... }
  datagrabber: The datagrabber object (UltraLog::Datagrabber).
Example:

do_action 'ConnectToDatagrabber', 'sb022' do |datagrabber|
  run = datagrabber.new_run
  run.wait_for_completion
end
   -------
Name: EditOPlan
Description: Edit and resend the OPlan.
Resultant State: SocietyPlanning
Prior States: SocietyRunning
Block syntax: { | oplan | ... }
  oplan: The OPlan edit control class (UltraLog::OPlan).
Example:

do_action 'EditOPlan' do |oplan|
  org = oplan['109-MDM-TRKCO']
  org['DEPLOYMENT'].save(nil, nil, '=85')
  oplan.update
end
   -------
Name: ExperimentFailed
Description: Marker action to document that the experiment failed.
Resultant State: None
Prior States: None
Parameters:
  message: default=nil, the message to output
Example:

do_action 'ExperimentFailed', 'Failed to get planning complete'
   -------
Name: ExperimentSucceeded
Description: Marker action to document that the experiment succeeded.
Resultant State: None
Prior States: None
Parameters:
  message: default=nil, the message to output
Example:

do_action 'ExperimentSucceeded', 'Finished full run'
   -------
Name: FreezeSociety
Description: Freeze the society using the Freeze servlet.
Resultant State: None
Prior States: SocietyRunning
Example:

do_action 'FreezeSociety'
   -------
Name: GLMStimulator
Description: Performs a GLM Stimulator pertubation on the society.
Resultant State: SocietyPlanning
Prior States: SocietyRunning
Parameters:
  name: required, The name of the agent to stimulate.
Block syntax: { | stimulator | ... }
  stimulator: The GLMStimulator instance (UltraLog::GLMStimulator).
Example:

do_action 'GLMStimulator', '1-35-ARBN' do |stimulator|
  glms.inputFileName = 'Supply.dat.xml'
  glms.update
end
   -------
Name: GenericAction
Description: The GenericAction Action is useful for performing any ad hoc processing during a run, such as waiting (sleeping) for a period of time, or any other task.
Resultant State: None
Prior States: None
Block syntax: { | run | ... }
  run: The run object (Cougaar::Experiment::Run)
Example:

do_action 'GenericAction' do |run|
  sleep 3.minutes
end
   -------
Name: GetAgentCompletion
Description: Gets an individual agent's completion statistics.
Resultant State: None
Prior States: SocietyRunning
Parameters:
  agent: required, The name of the agent.
Block syntax: { | stats | ... }
  stats: The completion statistics object (UltraLog::Completion).
Example:

do_action 'GetAgentCompletion', 'NCA' do |stats|
  puts stats
end
   -------
Name: InitCnCCalcBaselineRun
Description: Initialize a baseline run entry in the CnCCalc database.
Resultant State: CnCCalcInitialized
Prior States: None
Parameters:
  desc: required, The run description.
Example:

do_action 'InitCnCCalcBaselineRun', 'AL-398 base run'
   -------
Name: InitCnCCalcStressRun
Description: Initialize a stress run entry in the CnCCalc database.
Resultant State: CnCCalcInitialized
Prior States: None
Parameters:
  desc: required, The run description.
Example:

do_action 'InitCnCCalcStressRun', 'AL-398 stress run'
   -------
Name: KillNodes
Description: Kills running node(s).
Resultant State: None
Prior States: SocietyRunning
Parameters:
  nodes: *parameters, The list of nodes to kill
Example:

do_action 'KillNodes', 'FWD-A', 'FWD-B'
   -------
Name: LoadSocietyFromCSmart
Description: Load a society definition from the CSmart database.
Resultant State: SocietyLoaded
Prior States: None
Parameters:
  experiment_name: required, The name of the experiment in the csmart database
  host: required, The host that the MySQL database is on
  username: required, The username for the database
  password: required, The MySQL password
  db: required, The MySQL database name
Example:

do_action 'LoadSocietyFromCSmart', 'FULL-1AD-TRANS-DEFAULT', 
  'u052', 'society_config', 's0c0nfig', 'asmt02'
   -------
Name: LoadSocietyFromScript
Description: Load a society definition from a Ruby society file.
Resultant State: SocietyLoaded
Prior States: None
Parameters:
  filename: required, The Ruby file name
Example:

do_action 'LoadSocietyFromScript', 'full-1ad.rb'
   -------
Name: LoadSocietyFromXML
Description: Load a society definition from an XML.
Resultant State: SocietyLoaded
Prior States: None
Parameters:
  filename: required, The XML file name
Example:

do_action 'LoadSocietyFromXML', 'full-1ad.xml'
   -------
Name: PublishGLSRoot
Description: Publishes the GLS root task to the glsinit servlet.
Resultant State: SocietyPlanning
Prior States: GLSReady
Example:

do_action 'PublishGLSRoot'
   -------
Name: RehydrateSociety
Description: This action is used in place of OPlan/GLS actions if you start a society from a persistent state.
Resultant State: SocietyPlanning
Prior States: SocietyRunning
Example:

do_action 'RehydrateSociety'
   -------
Name: ResetCrypto
Description: Resets (clears) the crypto data for the agents prior to a society run.
Resultant State: None
Prior States: OperatorServiceConnected
Example:

do_action 'ResetCrypto'
   -------
Name: RestartNodes
Description: Restarts stopped node(s).
Resultant State: None
Prior States: SocietyRunning
Parameters:
  nodes: *parameters, The list of nodes to restart
Example:

do_action 'RestartNodes', 'FWD-A', 'FWD-B'
   -------
Name: RunCnCCalc
Description: Starts the CnCCalculator to collect data.
Resultant State: CnCCalcRunning
Prior States: CnCCalcInitialized, PlanningComplete
Example:

do_action 'RunCnCCalc'
   -------
Name: SaveSocietyCompletion
Description: Gets all agent's completion statistics and writes them to a file.
Resultant State: None
Prior States: SocietyRunning
Parameters:
  file: required, The file name to write to.
Example:

do_action 'SaveSocietyCompletion', 'completion.xml'
   -------
Name: SendOPlan
Description: Sends the OPlan to the glsinit servlet.
Resultant State: OPlanSent
Prior States: OPlanReady
Example:

do_action 'SendOPlan'
   -------
Name: Sleep
Description: Sleep the script for the specified number of seconds.
Resultant State: None
Prior States: None
Parameters:
  seconds: Number of seconds to sleep (Numeric)
Example:

do_action 'Sleep', 5.minutes
   -------
Name: StartDatagrabber
Description: Starts the Jabber communications subsystem and connects to the Jabber server.
Resultant State: None
Prior States: None
Parameters:
  host: required, The host running datagrabber.
Example:

do_action 'StartDatagrabber', 'sb022'
   -------
Name: StartJabberCommunications
Description: Starts the Jabber communications subsystem and connects to the Jabber server.
Resultant State: CommunicationsRunning
Prior States: SocietyLoaded
Parameters:
  username: default='acme_console', The username of the account used to control the experiment.
  server: default='acme', The Jabber server name.
  pwd: default='c0ns0le', The password for the Jabber account.
Example:

do_action 'StartJabberCommunications', 'acme_console', 'myjabberserver'
   -------
Name: StartSociety
Description: Start a society from XML or CSmart.
Resultant State: SocietyRunning
Prior States: CommunicationsRunning
Parameters:
  timeout: default=120, Number of seconds to wait to start each node before failing.
  debug: default=false, If true, outputs messages sent to start nodes.
Example:

do_action 'StartSociety', 300, true
   -------
Name: StopCommunications
Description: Stops the current communications system.
Resultant State: None
Prior States: CommunicationsRunning
Example:

do_action 'StopCommunications'
   -------
Name: StopSociety
Description: Stop a running society.
Resultant State: SocietyStopped
Prior States: SocietyRunning
Example:

do_action 'StopSociety'
   -------
Name: TransformSociety
Description: Transforms the society with a list of rules.
Resultant State: None
Prior States: SocietyLoaded
Parameters:
  verbose: required, If true, displays the transformations performed. (true | false)
  rules: *rules, The rules to run.  Can be file names or directory names.
Example:

do_action 'TransformSociety', true, 'config/rules/isat/tic_env.rule', 'config/rules/logistics'
   -------
Name: VerifyHosts
Description: Verify the hosts used by an experiment by sending an communications message to each ACME Service.
Resultant State: None
Prior States: CommunicationsRunning
Example:

do_action 'VerifyHosts'
   -------
Undocumented Actions: ---------------------------
EgregiousHack

Documented States: ---------------------------
Name: CnCCalcComplete 
Description: Wait until the CnCCalc run is complete.
Default timeout: 3000 seconds
Prior States: CnCCalcRunning
   -------
Name: CnCCalcInitialized (NOOP)
Description: Indicates that the CnCCalc run is initialized.
   -------
Name: CnCCalcRunning (NOOP)
Description: Indicates that the CnCCalc is running.
   -------
Name: Command 
Description: Puts the script in a wait state to await an instant message to continue.
Default timeout: None
Prior States: CommunicationsRunning
Parameters:
  command: required, The string command to wait for.
  timeout: default=nil, Number of seconds to timeout.
Example:

wait_for 'Command', 'continue'
   -------
Name: CommunicationsRunning (NOOP)
Description: Indicates that the Communications was started.
   -------
Name: GLSReady 
Description: Waits for the GLS ready Cougaar Event.
Default timeout: 1800 seconds
Prior States: OPlanSent
Parameters:
  timeout: default=nil, Amount of time to wait in seconds.
  block: The timeout handler (unhandled: StopSociety, StopCommunications)
Example:

wait_for 'GLSReady', 5.minutes do
  puts 'Did not get GLSReady!!!'
  do_action 'StopSociety'
  do_action 'StopCommunications'
end
   -------
Name: OPlanReady 
Description: Waits for the OPlan ready Cougaar Event.
Default timeout: 1800 seconds
Prior States: SocietyRunning
Parameters:
  timeout: default=nil, Amount of time to wait in seconds.
  block: The timeout handler (unhandled: StopSociety, StopCommunications
Example:

wait_for 'OPlanReady', 2.hours do
  puts 'Did not get OPlanReady!!!'
  do_action 'StopSociety'
  do_action 'StopCommunications'
end
   -------
Name: OPlanSent (NOOP)
Description: Indicates that the OPlan was sent.
   -------
Name: OperatorServiceConnected (NOOP)
Description: Indicates that the operator service was successfully connected to.
   -------
Name: PlanningActive 
Description: Waits for the Planning Active Cougaar Event.
Default timeout: 3600 seconds
Prior States: PlanningComplete
Parameters:
  timeout: default=nil, Amount of time to wait in seconds.
  block: The timeout handler (unhandled: StopSociety, StopCommunications)
Example:

wait_for 'PlanningActive', 10.minutes do
  puts 'Did not get Planning Active!!!'
  do_action 'StopSociety'
  do_action 'StopCommunications'
end
   -------
Name: PlanningComplete 
Description: Waits for the Planning Complete Cougaar Event.
Default timeout: 3600 seconds
Prior States: SocietyPlanning
Parameters:
  timeout: default=nil, Amount of time to wait in seconds.
  block: The timeout handler (unhandled: StopSociety, StopCommunications)
Example:

wait_for 'PlanningComplete', 2.hours do
  puts 'Did not get Planning Complete!!!'
  do_action 'StopSociety'
  do_action 'StopCommunications'
end
   -------
Name: RunStopped 
Description: Indicates that the run was stopped.
Default timeout: 1200 seconds
Prior States: SocietyStopped
   -------
Name: SocietyLoaded (NOOP)
Description: Indicates that the society was loaded from XML, a Ruby script or a CSmart database.
   -------
Name: SocietyPlanning (NOOP)
Description: Indicates that the society is planning.
   -------
Name: SocietyRunning (NOOP)
Description: Indicates that the society started.
   -------
Name: SocietyStopped (NOOP)
Description: Indicates that the society stopped.
   -------
